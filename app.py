import streamlit as st
import os
import google.generativeai as genai
from transformers import pipeline

genai.configure(api_key=os.getenv("GOOGLE_API_KEY"))
model = genai.GenerativeModel('gemini-1.5-flash')

# Load the T5 model and pipeline
classifier = pipeline("text2text-generation", model="google/flan-t5-small")

# Prompt template for category generation
def generate_product_category(product_name):
    prompt_template = "Identify the most appropriate product category for the following item. Respond with only the category name: '{product_name}'."
    prompt = prompt_template.format(product_name=product_name)
        
    response = classifier(prompt, max_length = 20, num_return_sequences = 1)
    if response and 'generated_text' in response[0]:
        category = response[0]['generated_text'].strip()
        if category.lower() != product_name.lower():
            return category
    return "Uncategorized"

# Prompt template for description generation
def generate_product_description(product_name, product_category, product_features):
    prompt = (f"Create a compelling product description for the sales team. "
              f"Product Name: {product_name}. "
              f"Category: {product_category}. "
              f"Key Features: {product_features}. "
              f"Generate a description that:\n"
              f" 1. Highlights key benefits\n"
              f" 2. Uses engaging language\n"
              f" 3. Includes key features\n"
              f" 4. Speaks to the target audience\n"
              f" 5. Maintains a professional tone\n"
              f" 6. Is SEO-friendly\n"
              f" 7. Keep it under 250 words")
    response = model.generate_content(prompt, generation_config={"temperature": 0.5})
    return response.text if response else "No description generated."

def main():
    st.set_page_config("Product Category & Description Generator")
    st.title("Product Category & Description Generator")
    st.markdown("Enter product details to get a predicted category and generate a sales-oriented description.")

    product_name = st.text_input("Product Name:")
    product_features = st.text_input("Product Features (comma-separated):")
    product_category = ""
    # Layout with columns
    col1, col2 = st.columns([3, 2])

    # User input
    with col1:
        product_category = st.text_input("Enter the Product Category (Enter GENERATE if you want the category to be autogenerated)")
    #product_cat = st.text_input("Enter the Product Category (Enter GENERATE if you want the category to be autogenerated)")

        if product_category=='GENERATE':
            product_category = generate_product_category(product_name)
            with col2:
                st.markdown(f"<p style='font-size:16px;'>Generated category: <strong>{product_category}</strong></p>", unsafe_allow_html=True)
            if product_category == "Uncategorized":
                product_category = st.text_input("Please enter the product category:")

    # Generate product description
    if st.button("Generate Product Description"):
        if product_name and product_features:
            if not product_category or product_category == "Uncategorized":
                st.error("Please enter a valid product category before generating the description.")
            else:
                description = generate_product_description(product_name, product_category, product_features)
                st.subheader("Product Description:")
                st.markdown(description)
        else:
            st.error("Please enter both product name and features.")

    st.markdown("---")
    st.markdown("Built using Google Flan-T5, Gemini, and Streamlit.")

if __name__ == "__main__":
    main()